"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для пятого скрипта
"""

""" Курс: Алгоритмы и структуры данных на Python
Задание 3.

Для этой задачи
1) придумайте 2-3 решения (обязательно с различной сложностью)
2) оцените сложность каждого выражения в этих решениях в нотации О-большое
3) оцените итоговую сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.

Примечание: ПРОШУ ВАС ВНИМАТЕЛЬНО ЧИТАТЬ ЗАДАНИЕ!
"""

"""
Сделано: Взаместо операций сортировки словаря использована библиотека collections
Занимает: 0.0 MiB MiB взаместо 0.0078125 MiB
"""

from collections import Counter
from memory_profiler import memory_usage


def decor(func):
    def wrapper(*args, **kwargs):
        m1 = memory_usage()
        func(args[0])
        m2 = memory_usage()
        mem_diff = m2[0] - m1[0]
        return f'Затраченная память {mem_diff} MiB'

    return wrapper


# Изначальное решение
@decor
def func_1(dict_obj):  # Общая сложность: O(N log N)
    list_obj = []  # O(len()) - линейная
    for keys, value in dict_obj.items():  # O(n) - линейная
        list_obj.append(value)  # O(1) - константная
        list_obj.sort()  # O(N log N) - логарифмическая
        list_obj.reverse()  # O(n) - линейная
    return list_obj[0:3]  # O(1) - константная


print(func_1({'Company1': 140000,
              'Company2': 170000,
              'Company3': 100000,
              'Company4': 50000,
              'Company5': 20000000,
              'Company6': 80000,
              'Company7': 150000}))


# Оптимизированное решение
@decor
def func(dict_obj):
    return Counter(dict_obj).most_common(3)


print(func({'Company1': 140000,
            'Company2': 170000,
            'Company3': 100000,
            'Company4': 50000,
            'Company5': 20000000,
            'Company6': 80000,
            'Company7': 150000}))
